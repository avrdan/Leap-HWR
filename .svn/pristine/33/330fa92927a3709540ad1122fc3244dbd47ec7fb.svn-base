import java.awt.AWTException;
import java.awt.Robot;
import java.awt.TextArea;
import java.util.ArrayList;

import com.leapmotion.leap.Finger;
import com.onformative.leap.LeapMotionP5;

import de.voidplus.dollar.OneDollar;
import processing.core.PApplet;
import processing.core.PVector;


public class HWRCanvas extends PApplet{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private OneDollar one;

	// generate key events
	Robot robot;
	
	// the leap
	private LeapMotionP5 leap;
	
	private Main  main;
	public HWRCanvas()
	{
		
	}

	
	public HWRCanvas(Main main)
	{
		
		this.main    = main;

	}
	
	@Override
	public void setup()
	{
		  size(300,300);
		  background(250);

		  // initialize the Leap
		  leap = new LeapMotionP5(this);
		  
		  try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		  
		  one = new OneDollar(this);
		 
//		  one.add("A", new Integer[] {68, 220, 68, 220, 68, 220, 68, 220, 72, 217, 97, 172, 97, 172, 110, 150, 
//		    131, 119, 145, 100, 158, 85, 172, 70, 177, 64, 180, 61, 182, 59, 182, 59, 184, 58, 184, 58, 185, 
//		    57, 185, 57, 185, 56, 185, 56, 185, 56, 185, 56, 186, 58, 187, 73, 187, 85, 187, 99, 188, 116, 
//		    191, 141, 191, 174, 191, 174, 192, 186, 192, 186, 197, 205, 199, 212, 199, 215, 200, 217, 200, 
//		    217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 
//		    200, 217, 200, 217, 200, 216, 201, 205, 201, 197, 201, 188, 200, 165, 200, 165, 197, 159, 194, 
//		    151, 193, 149, 192, 148, 191, 147, 191, 147, 191, 147, 191, 147, 191, 147, 191, 147, 191, 147, 
//		    191, 147, 191, 147, 191, 147, 191, 147, 186, 147, 186, 147, 172, 147, 164, 147, 153, 147, 153, 147, 
//		    126, 147, 126, 147, 106, 147, 106, 147, 102, 147, 102, 147, 102, 147, 102, 147, 102, 147, 102, 147, 
//		    102, 147, 102, 147, 101, 147, 101, 147});
		  
		  one.add("A", new Integer[] {47, 279, 47, 279, 47, 279, 47, 279, 47, 278, 71, 235, 71, 235, 90, 205, 101, 186, 116, 163, 131, 138, 147, 115, 156, 101, 170, 82, 170, 82, 174, 77, 179, 73, 181, 72, 181, 72, 182, 71, 182, 71, 182, 71, 182, 71, 183, 71, 183, 74, 185, 88, 185, 88, 200, 139, 209, 166, 218, 188, 218, 188, 236, 216, 246, 226, 257, 239, 268, 251, 275, 263, 279, 273, 282, 285, 282, 285, 282, 291, 282, 291, 282, 291, 282, 291, 282, 291, 282, 291, 282, 291, 282, 291, 282, 291});
		    
		  one.add("F", new Integer[] {266, 46, 266, 46, 266, 46, 266, 46, 266, 46, 266, 46, 265, 46, 160, 37, 160, 37, 119, 35, 119, 35, 92, 34, 92, 34, 76, 33, 71, 33, 69, 33, 67, 33, 67, 33, 67, 33, 67, 33, 67, 33, 67, 33, 68, 34, 72, 43, 79, 56, 86, 72, 86, 72, 98, 106, 102, 122, 105, 138, 105, 138, 109, 167, 110, 193, 110, 193, 110, 201, 110, 210, 109, 218, 108, 221, 107, 223, 107, 227, 105, 236, 104, 249, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265, 104, 265});  
		    
		  one.add("G", new Integer[] {214, 91, 214, 91, 214, 91, 214, 91, 214, 90, 214, 75, 214, 75, 209, 
		    66, 200, 56, 192, 48, 184, 42, 175, 38, 175, 38, 154, 36, 154, 36, 135, 36, 124, 42, 113, 50, 
		    104, 58, 95, 65, 88, 72, 83, 79, 79, 87, 76, 111, 76, 111, 75, 127, 78, 163, 84, 179, 84, 179, 
		    96, 200, 106, 210, 120, 221, 151, 233, 164, 238, 164, 238, 203, 241, 219, 240, 228, 236, 237, 
		    230, 244, 220, 249, 204, 249, 193, 249, 184, 249, 177, 249, 173, 249, 168, 249, 166, 249, 164, 
		    247, 162, 246, 162, 244, 162, 240, 162, 240, 162, 233, 162, 218, 163, 206, 163, 195, 163, 183, 
		    163, 170, 163, 156, 163, 148, 163, 145, 163, 145, 163, 144, 163, 144, 163, 144, 163, 144, 163, 
		    144, 163, 144, 163, 144, 163, 144, 163}); 
		  
		  one.add("L", new Integer[] {103, 30, 103, 30, 103, 30, 103, 30, 103, 30, 103, 32, 103, 101, 103, 101, 103, 133, 103, 155, 103, 181, 103, 203, 103, 221, 103, 221, 103, 245, 103, 253, 103, 259, 103, 261, 103, 263, 103, 264, 103, 266, 104, 267, 106, 268, 110, 270, 115, 270, 122, 270, 133, 264, 145, 259, 157, 255, 169, 251, 177, 249, 188, 247, 195, 247, 203, 247, 208, 247, 218, 247, 218, 247, 221, 247, 223, 248, 224, 250, 225, 251, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252, 225, 252});
		  
		  one.add("V", new Integer[] {35, 41, 35, 41, 35, 41, 35, 41, 35, 41, 35, 41, 35, 41, 35, 41, 35, 41, 35, 43, 61, 94, 61, 
				  94, 70, 104, 78, 118, 89, 131, 98, 143, 108, 152, 115, 161, 122, 168, 131, 178, 138, 185, 145, 194, 152, 201, 
				  159, 208, 164, 215, 167, 218, 170, 223, 172, 226, 174, 227, 176, 229, 177, 230, 178, 232, 178, 232, 178, 232, 
				  178, 232, 178, 232, 178, 232, 178, 232, 178, 232, 178, 232, 178, 231, 178, 229, 178, 223, 178, 214, 178, 195, 
				  178, 177, 182, 159, 188, 140, 196, 120, 206, 100, 212, 89, 218, 78, 222, 70, 226, 63, 232, 55, 239, 42, 243, 
				  35, 246, 27, 249, 23, 253, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 
				  16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 16, 254, 
				  16, 254, 16, 254, 16, 254, 16});
		  
		  //one.add("T", new Integer[] {59, 43, 59, 43, 59, 43, 59, 43, 59, 43, 59, 43, 59, 43, 103, 45, 103, 45, 116, 46, 128, 48, 142, 48, 155, 48, 169, 49, 183, 49, 196, 49, 204, 49, 213, 49, 218, 49, 221, 49, 223, 49, 224, 50, 225, 50, 226, 51, 228, 55, 232, 63, 235, 77, 239, 92, 241, 106, 243, 125, 244, 143, 244, 158, 244, 166, 244, 174, 244, 181, 244, 187, 244, 191, 245, 194, 246, 198, 247, 200, 248, 201, 248, 202, 249, 204, 250, 207, 250, 210, 251, 214, 251, 219, 251, 224, 252, 228, 252, 230, 252, 231, 252, 232, 252, 233, 252, 234, 252, 243, 252, 243, 254, 259, 256, 266, 256, 269, 256, 269, 256, 269});
		  one.add("T", new Integer[] {39, 48, 88, 44, 88, 44, 118, 43, 153, 43, 187, 43, 207, 43, 228, 43, 244, 43, 255, 43, 265, 43, 272, 43, 277, 43, 280, 43, 281, 47, 282, 52, 282, 60, 282, 76, 282, 97, 282, 127, 282, 149, 282, 174, 282, 192, 285, 209, 286, 222, 286, 222, 286, 222});
		  
		  //one.add("caps", new Integer[] {138, 279, 138, 279, 138, 279, 138, 279, 138, 279, 138, 279, 138, 277, 135, 164, 135, 164, 133, 124, 133, 102, 133, 76, 133, 63, 133, 51, 133, 46, 133, 44, 133, 44, 132, 42, 132, 42, 132, 42, 132, 42, 132, 42, 132, 42, 132, 43, 132, 44, 132, 51, 131, 62, 131, 62, 124, 98, 116, 119, 108, 144, 108, 144, 90, 185, 85, 196, 82, 204, 80, 207, 79, 208, 79, 208, 79, 208, 79, 208, 79, 208, 79, 208, 79, 208, 79, 207, 79, 206, 79, 205, 79, 201, 79, 192, 83, 177, 91, 148, 98, 126, 104, 103, 113, 80, 119, 66, 125, 55, 129, 47, 131, 43, 132, 42, 133, 42, 133, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 134, 42, 197, 190, 209, 226, 216, 259, 220, 278, 220, 278});
		  one.add("caps", new Integer[] {137,139,135,141,133,144,132,146,130,149,128,151,126,155,123,160,120,166,116,171,112,177,107,183,102,188,100,191,95,195,90,199,86,203,82,206,80,209,75,213,73,213,70,216,67,219,64,221,61,223,60,225,62,226,65,225,67,226,74,226,77,227,85,229,91,230,99,231,108,232,116,233,125,233,134,234,145,233,153,232,160,233,170,234,177,235,179,236,186,237,193,238,198,239,200,237,202,239,204,238,206,234,205,230,202,222,197,216,192,207,186,198,179,189,174,183,170,178,164,171,161,168,154,160,148,155,143,150,138,148,136,148} );
		  
		  one.add("circle", new Integer[] {127,141,124,140,120,139,118,139,116,139,111,140,109,141,104,144,100,147,96,152,93,157,90,163,87,169,85,175,83,181,82,190,82,195,83,200,84,205,88,213,91,216,96,219,103,222,108,224,111,224,120,224,133,223,142,222,152,218,160,214,167,210,173,204,178,198,179,196,182,188,182,177,178,167,170,150,163,138,152,130,143,129,140,131,129,136,126,139} );
		  
		  one.bind("A", main, "detectedA");
		  //one.bind("G", main, "detectedG");
		  //one.bind("L", main, "detectedL");
		  //one.bind("V", main, "detectedV");
		  one.bind("F", main, "detectedF");
		  one.bind("T", main, "detectedT");
		  
		  one.bind("caps", main, "detectedCaps");
		  
		  one.setMinLength(50);
		  one.setMaxLength(2500);
		  one.setMaxTime(5000);

		  one.setMinScore(85); // 85%
		  one.setRotationAngle(3);
		  one.setFragmentationRate(64);

		  println(one);
		  one.setVerbose(true);  
		  
		  //one.start(200);
		  //one.setMaxTime(5000);
	}
	
	@Override
	public void draw()
	{
		clear();
		background(125);
		one.check();
		  
		noFill();
		one.draw();
		
		// anyway to detect only one finger?
		// detect a finger
		// start the unistroke
		// finger moves away - stop unistroke
		for (Finger finger : leap.getFingerList()) {
		    PVector fingerPos = leap.getTip(finger);
		    ellipse(fingerPos.x, fingerPos.y, 10, 10);
		    
		    
		    //one.update(200, fingerPos.x, fingerPos.y);
		    
		    break;
		  }
	}
	
	
	

	
	@Override
	public void mousePressed()  
	{ 
	  one.start(100);
	} // 100 = ID
	
	@Override
	public void mouseDragged()  { one.update(100, mouseX, mouseY); 
	}
	
	@Override
	public void mouseReleased() { one.end(100); 

	}
}
