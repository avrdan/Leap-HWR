import java.awt.AWTException;
import java.awt.Robot;
import java.awt.TextArea;
import java.util.ArrayList;

import com.leapmotion.leap.Finger;
import com.onformative.leap.LeapMotionP5;

import de.voidplus.dollar.OneDollar;
import processing.core.PApplet;
import processing.core.PVector;


public class HWRCanvas extends PApplet{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private OneDollar one;

	// generate key events
	Robot robot;
	
	// the leap
	private LeapMotionP5 leap;
	
	private Main  main;
	public HWRCanvas()
	{
		
	}

	
	public HWRCanvas(Main main)
	{
		
		this.main    = main;

	}
	
	@Override
	public void setup()
	{
		  size(300,300);
		  background(250);

		  // initialize the Leap
		  leap = new LeapMotionP5(this);
		  
		  try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		  
		  one = new OneDollar(this);
		 
		  one.add("A", new Integer[] {68, 220, 68, 220, 68, 220, 68, 220, 72, 217, 97, 172, 97, 172, 110, 150, 
		    131, 119, 145, 100, 158, 85, 172, 70, 177, 64, 180, 61, 182, 59, 182, 59, 184, 58, 184, 58, 185, 
		    57, 185, 57, 185, 56, 185, 56, 185, 56, 185, 56, 186, 58, 187, 73, 187, 85, 187, 99, 188, 116, 
		    191, 141, 191, 174, 191, 174, 192, 186, 192, 186, 197, 205, 199, 212, 199, 215, 200, 217, 200, 
		    217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 200, 217, 
		    200, 217, 200, 217, 200, 216, 201, 205, 201, 197, 201, 188, 200, 165, 200, 165, 197, 159, 194, 
		    151, 193, 149, 192, 148, 191, 147, 191, 147, 191, 147, 191, 147, 191, 147, 191, 147, 191, 147, 
		    191, 147, 191, 147, 191, 147, 191, 147, 186, 147, 186, 147, 172, 147, 164, 147, 153, 147, 153, 147, 
		    126, 147, 126, 147, 106, 147, 106, 147, 102, 147, 102, 147, 102, 147, 102, 147, 102, 147, 102, 147, 
		    102, 147, 102, 147, 101, 147, 101, 147});
		    
		    
		    
		  one.add("G", new Integer[] {214, 91, 214, 91, 214, 91, 214, 91, 214, 90, 214, 75, 214, 75, 209, 
		    66, 200, 56, 192, 48, 184, 42, 175, 38, 175, 38, 154, 36, 154, 36, 135, 36, 124, 42, 113, 50, 
		    104, 58, 95, 65, 88, 72, 83, 79, 79, 87, 76, 111, 76, 111, 75, 127, 78, 163, 84, 179, 84, 179, 
		    96, 200, 106, 210, 120, 221, 151, 233, 164, 238, 164, 238, 203, 241, 219, 240, 228, 236, 237, 
		    230, 244, 220, 249, 204, 249, 193, 249, 184, 249, 177, 249, 173, 249, 168, 249, 166, 249, 164, 
		    247, 162, 246, 162, 244, 162, 240, 162, 240, 162, 233, 162, 218, 163, 206, 163, 195, 163, 183, 
		    163, 170, 163, 156, 163, 148, 163, 145, 163, 145, 163, 144, 163, 144, 163, 144, 163, 144, 163, 
		    144, 163, 144, 163, 144, 163, 144, 163});  
		  
		  one.bind("A", main, "detectedA");
		  one.bind("G", main, "detectedG");
		  
		  one.setMinLength(50);
		  one.setMaxLength(2500);
		  one.setMaxTime(5000);

		  one.setMinScore(65); // 85%
		  one.setRotationAngle(3);
		  one.setFragmentationRate(64);

		  println(one);
		  one.setVerbose(true);  
		  
		  one.start(200);
		  one.setMaxTime(5000);
	}
	
	@Override
	public void draw()
	{
		clear();
		background(125);
		one.check();
		  
		noFill();
		one.draw();
		
		// anyway to detect only one finger?
		// detect a finger
		// start the unistroke
		// finger moves away - stop unistroke
		for (Finger finger : leap.getFingerList()) {
		    PVector fingerPos = leap.getTip(finger);
		    ellipse(fingerPos.x, fingerPos.y, 10, 10);
		    
		    
		    one.update(200, fingerPos.x, fingerPos.y);
		    
		    break;
		  }
	}
	
	
	

	
	@Override
	public void mousePressed()  
	{ 
	  //one.start(100);
	} // 100 = ID
	
	@Override
	public void mouseDragged()  { //one.update(100, mouseX, mouseY); 
	}
	
	@Override
	public void mouseReleased() { //one.end(100); 

	}
}
